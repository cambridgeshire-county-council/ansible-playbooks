---
- name: Create backup folder
  hosts: localhost
  connection: local

  tasks:
   - name: Get ansible date/time facts
     setup:
       filter: "ansible_date_time"
       gather_subset: "!all"

   - name: Store DTG as fact
     set_fact:
       DTG: "{{ ansible_date_time.date }}"

   - name: Create Directory {{hostvars.localhost.DTG}}
     file:
      path: ~/backups/{{hostvars.localhost.DTG}}
      state: directory
  run_once: true

- name: Gather Switch info 
  hosts: switches
  vars_files: vars/image_list.yml
  tasks:
    - name: Gather info
      cisco.ios.ios_facts:
        gather_subset: min
      register: facts
    
    - name: Run command to get free space
      ios_command:
        commands:
          - show file systems
        wait_for:
          - result[0] contains flash
      register: result
    
    - set_fact:
        free_space: "{{ (result.stdout | regex_findall('(\\d*)\\s*[a-z]*\\s*[a-z]*\\s*flash:'))[0]}}"
        #model: "{{ (facts.ansible_facts.ansible_net_image | regex_search('.*:(.*)-.*','\\1'))[0] }}"
        current_image: "{{ (facts.ansible_facts.ansible_net_image| regex_search('.*:(.*)','\\1'))[0] }}"
    
    - set_fact:
        latest_image: "{{ images[model]['image_name'] }}"
        image_filesize: "{{ images[model]['filesize'] }}"
        image_checksum: "{{ images[model]['checksum'] }}"
        image_path: "{{ images[model]['image_path'] }}"
    
    - name: check if image already exists on disk
      stat:
        path: "/{{ latest_image }}"
      register: file_status
    
    - name: copy image
      ios_command:
        commands:
          - command: "copy tftp://{{ image_location }}{{ image_path }}{{ latest_image }} ."
            prompt: "Destination filename"
            answer: "\r"
      vars: 
        ansible_command_timeout: 3600
      when: 
        - current_image != latest_image
        - not(file_status.stat.exists)
        - free_space > image_filesize

    - name: Check MD5 checksum of copied file
      ios_command:
        commands:
          - "verify /md5 flash:{{ latest_image }}"
        wait_for: result[0] contains Done
      register: result
      when: 
        - current_image != latest_image

    - name: check md5 checksum matches
      assert:
        that: result.stdout[0][-32:] == ['image_checksum']
        success_msg: File copy succeeded, copied file checksum {{ result.stdout[0][-32:] }} matches original checksum {{ image_checksum }}
        fail_msg: File copy failed, copied file checksum {{ result.stdout[0][-32:] }} different from original checksum {{ image_checksum }}
      when: 
        - current_image != latest_image

    - name: Change Boot Variable to new image 
      ios_config: 
        commands: 
          - "boot system flash:{{ image_name }}"
        save_when: always 
      when: 
         - current_image != latest_image

    - name: Reload the Device
      cli_command: 
        command: reload
        prompt: 
          - confirm
        answer: 
          - 'y'
      when: 
        - current_image != latest_image
         
    - name: Wait for device to come back online
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        delay: 90
      delegate_to: localhost
      when: 
        - current_image != latest_image

    - name: Check Image Version      
      ios_facts:
    - set_fact:
        post_update_image: "{{ (facts.ansible_facts.ansible_net_image| regex_search('.*:(.*)','\\1'))[0] }}"

    - name: Assert upgrade complete
      assert:
        that:
          - post_update_image == latest_image
        success_msg: "Switch up-to-date. Latest image is {{ latest_image }}, and installed image is {{ post_update_image }}."
        fail_msg: "Switch not up-to-date. Latest image is {{ latest_image }}, and installed image is {{ post_update_image }}."
...
